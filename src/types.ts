/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/socio-demographics/stats/{city}": {
    /**
     * ### **About**:
     *
     * Takes in a city and returns the summarized (and averaged) statistics on demographics, income, household composition, and racial information.
     * Can be used to summarize the overall population profile of a city.
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city name to retrieve stats for | One of the cities from `/cities` endpoint list |
     */
    get: operations["sociodemographics_city_socio_demographics_stats__city__get"]
  }
  "/socio-demographics/stats/{city}/{area}": {
    /**
     * ### **About**:
     *
     * Takes in a city and area and returns the summarized (and averaged) statistics on demographics, income, household composition, and racial information    for the area. Useful for qualifying population profiles within specific neighborhoods or administrative areas.
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city containing the area | One of the cities from `/cities` endpoint list |
     * | **area** | The area / neighborhood within the city | One of the areas within the city from `/cities/places/{city}` endpoint list |
     */
    get: operations["sociodemographics_area_socio_demographics_stats__city___area__get"]
  }
  "/socio-demographics/sales_territory/time": {
    /**
     * ### **About**:
     *
     * Takes in a coordinate point, the city where the point is located and the [isochrone](https://en.wikipedia.org/wiki/Isochrone_map) parameters.
     * Returns the isochrone populated with the relevant sales territory statistics valid within the isochrone area.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/sales_territory.png" height="400"></img></p>
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | |
     * | **city** | The city where the coordinate point is taken | One of the cities from `/cities` endpoint list |
     * | **time_minutes** | The time in minutes to consider using `mode_of_mobility` from the coordinate point | Cannot exceed 60 |
     * | **mode_of_mobility** | The means of transporation used to cover an area within `time_minutes` duration | Acceptable values: `driving`, `walking` |
     */
    get: operations["sales_territory_time_isochrone_socio_demographics_sales_territory_time_get"]
  }
  "/socio-demographics/sales_territory/distance": {
    /**
     * ### **About**:
     *
     * Takes in a coordinate point, the city where the point is located and the radius / [isoline](https://en.wikipedia.org/wiki/Contour_line) parameters.
     * **When `mode_of_mobility` is left as `null`**, `distance_meters` assumes a straight-line radius from the input coordinate point and populates the radius with required statistics of the sales territory.
     * **When `mode_of_mobility` is specified**, `distance_meters` takes the actual travel distance by roads (and not a circular displacement) to populate the sales territory statistics.
     *
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/radius.png" height="300"></img></p>
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | |
     * | **city** | The city where the coordinate point is taken | One of the cities from `/cities` endpoint list |
     * | **distance_meters** | The distance (or displacement for circular radius) in meters to consider from the coordinate point | Cannot exceed 10km |
     * | **mode_of_mobility** | The means of transporation used to cover an area within `distance_meters` duration. | Acceptable values: `driving`, `walking`. If `null`, straight line radius is used as displacement |
     */
    get: operations["sales_territory_distance_isochrone_socio_demographics_sales_territory_distance_get"]
  }
  "/socio-demographics/sales_territory/coverage/candidates": {
    /**
     * ### **About**:
     *
     * Accepts a list of candidate locations and computes the coverage of all locations together with respect to the city taken for expansion.
     * Returns similar values to Sales Territory with `values` and `shares` taken for all locations. Useful for determining redundant locations / degree of overlap between sites.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/coverage.png" height="400"></img></p>
     *
     * ### **Payload**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **candidates** | List of candidate locations, each with `SalesTerritoryRequest` schema | All candidates must be within the same city |
     *
     * * The candidate locations' territories will be derived per location.
     * * The resulting geometries will be used to derive a unified metric of combined territory coverage.
     */
    post: operations["sales_territory_coverage_candidates_socio_demographics_sales_territory_coverage_candidates_post"]
  }
  "/socio-demographics/sales_territory/coverage/geojson": {
    /**
     * ### **About**:
     *
     * Accepts a GeoJSON of geometry features and computes the coverage of all locations together with respect to the city taken for expansion.
     * Returns similar values to Sales Territory with `values` and `shares` taken for all locations. Useful for determining redundant locations / degree of overlap between sites.
     *
     * ### **Payload**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **geojson** | a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) containing list of features. | Features can only be [Polygon or MultiPolygon](https://en.wikipedia.org/wiki/GeoJSON#Geometries) types. All features must be within the same city. |
     * | **city** | The city of the GeoJSON of features | One of the cities from `/cities` endpoint list
     */
    post: operations["sales_territory_coverage_geojson_socio_demographics_sales_territory_coverage_geojson_post"]
  }
  "/socio-demographics/sales_territory/coverage/geometries": {
    /**
     * ### **About**:
     *
     * Accepts a list of geometries and computes the coverage of all locations together with respect to the city taken for expansion.
     * Returns similar values to Sales Territory with `values` and `shares` taken for all locations. Useful for determining redundant locations / degree of overlap between sites.
     *
     * ### **Payload**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **geometries** | A list of geometries to derive coverage for. | Geometries can only be [Polygon or MultiPolygon](https://en.wikipedia.org/wiki/GeoJSON#Geometries) types. All geometries / features must be within the same city. |
     * | **city** | The city  within which geometries are present  | One of the cities from `/cities` endpoint list. |
     */
    post: operations["sales_territory_coverage_geometries_socio_demographics_sales_territory_coverage_geometries_post"]
  }
  "/competition/types": {
    get: operations["list_types_competition_types_get"]
  }
  "/competition/nearby/{commercial_type}": {
    /**
     * **About**:
     *
     * Takes in a coordinate point, the city where the point is located, the search radius and filters (brands and categories).
     * Returns a set of statistics and data for all outlets within the search radius.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/restaurants.png" height="300"></img></p>
     *
     * **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | |
     * | **city** | The city in which the coordinate points exist | One of the cities from `/cities` endpoint list |
     * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
     * | **radius_meters** | The straight line displacement (circular radius) inside which to search for outlets. | Cannot exceed 2000 |
     * | **brands** | A list of brands that filters for those brands within the search radius | Only accepts brands obtained from `competition/brands/{city}/{commercial_type}` |
     * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
     */
    get: operations["nearby_outlets_competition_nearby__commercial_type__get"]
  }
  "/competition/brands/{city}/{commercial_type}": {
    /**
     * **About**:
     *
     * Takes in a `city` and a `commercial_type` returns a set of all brands of `commercial_type` within the city.
     *
     * **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to list brands for | One of the cities from `/cities` endpoint list |
     * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
     */
    get: operations["select_brands_competition_brands__city___commercial_type__get"]
  }
  "/competition/categories/{city}/{commercial_type}": {
    /**
     * **About**:
     *
     * Takes in a `city` and a `commercial_type` returns a set of all categories of `commercial_type` within the city ordered by most outlets.
     *
     * **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to list categories for | One of the cities from `/cities` endpoint list |
     * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
     */
    get: operations["select_categories_competition_categories__city___commercial_type__get"]
  }
  "/competition/insights/categories/{city}/{commercial_type}": {
    /**
     * ### **About**:
     *
     * Takes in a `city` parameter along with optional filters for `categories` and `price range`.
     * Returns a comprehensive list of insights for the city for `commercial_type` taking categories as the threshold.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/cuisine_insights.png" height="300"></img></p>
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to receive category stats for | One of the cities from `/cities` endpoint list |
     * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
     * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
     * | **price_range** | The price range of outlets to filter for within a scaled range | 1 - 4|
     *
     * ### **Filter Tags**
     * **Categories**
     *
     * | metric | categories filter | price range filter |
     * | --- | :---: | :---: |
     * | **max_outlets** |  | ✅ |
     * | **min_avg_rating** |  | ✅ |
     * | **max_avg_reviews** |  | ✅ |
     * | **min_avg_rating** |  | ✅ |
     * | **category_stats** |  | ✅ |
     * | **category_by_pairwise_occurrence** | ✅ | ✅ |
     */
    get: operations["city_categories_stats_competition_insights_categories__city___commercial_type__get"]
  }
  "/competition/insights/brands/{city}/{commercial_type}": {
    /**
     * ### **About**:
     *
     * Takes in a `city`, `commercial_type` parameter along with optional filters for `categories` and `price range`.
     * Returns a comprehensive list of insights for the city taking brands as the threshold.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/brand_insights.png" height="300"></img></p>
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to receive brand stats for | One of the cities from `/cities` endpoint list |
     * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
     * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
     * | **price_range** | The price range of outlets to filter for within a scaled range | 1 - 4|
     *
     * ### **Filter Tags**
     *
     * **Brands**
     *
     * | metric | categories filter | price range filter |
     * | --- | :---: | :---: |
     * | **max_outlets** | ✅ | ✅ |
     * | **max_avg_rating** | ✅ | ✅ |
     * | **max_avg_reviews** | ✅ | ✅ |
     * | **outlets_count** | ✅ | ✅ |
     * | **brand_stats_by_outlet_count** | ✅ | ✅ |
     * | **brand_stats_by_avg_rating** | ✅ | ✅ |
     * | **brand_stats_by_avg_number_of_reviews** | ✅ | ✅ |
     * | **outlet_counts_by_price** | ✅ |  |
     * | **operating_hours_outlet_count** | ✅ | ✅ |
     * | **operating_hours** | ✅ | ✅ |
     */
    get: operations["city_brands_stats_competition_insights_brands__city___commercial_type__get"]
  }
  "/competition/insights/areas/{city}/{commercial_type}": {
    /**
     * ### **About**:
     *
     * Takes in a `city` and `commercial type` parameter along with optional filters for `categories` and `price range`.
     * Returns a comprehenensive list of insights for the city taking areas (roads, postcodes, etc) as the threshold.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/area_insights.png" height="300"></img></p>
     *
     * ### **Parameters**:
     *
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** |  The city to receive area stats for | One of the cities from `/cities` endpoint list |
     * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
     * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
     * | **price_range** | The price range of outlets to filter for within a scaled range | 1 - 4|
     *
     * ### **Filter Tags**
     *
     * **Brands**
     *
     * | metric | categories filter | price range filter |
     * | --- | :---: | :---: |
     * | **street_stats** | ✅ | ✅ |
     * | **neighbourhood_stats** | ✅ | ✅ |
     * | **postcode_stats** | ✅ | ✅ |
     */
    get: operations["city_area_stats_competition_insights_areas__city___commercial_type__get"]
  }
  "/cities": {
    /**
     * ### **About**
     * * Get a string array of all cities ordered by frequency of outlet count
     */
    get: operations["select_cities_cities_get"]
  }
  "/cities/reverse_geocode": {
    /**
     * ### **About**
     * Reverse geocode a latitude and longitude in the US. The maximum depth of the geocode is neighborhood level.
     * Hierarchy: `state` -> `county` -> `urban_area` -> `city / place` -> `neighborhood / area`
     *
     * ### **Hierarchy Coverage**
     * | level | coverage | example |
     * | --- | --- | --- |
     * | `state` | Full country - US | `California` |
     * | `county` | Full country - US | `San Francisco County` |
     * | `urban_area` | Dense populated urban areas in US | `San Francisco Bay Area` |
     * | `city / place` | Only available in areas that have `urban_area` | `San Francisco` |
     * | `neighborhood / area` | Only available in areas that have `city / place` | `Downtown` |
     *
     * ### **Parameters**
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | Only coordinates within United States |
     */
    get: operations["general_geocode_cities_reverse_geocode_get"]
  }
  "/cities/boundary/{city}": {
    /**
     * ### **About**
     * Takes in a city and returns the boundary as a GeoJSON of the city-limits.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/city_boundary.png" height="300"></img></p>
     *
     * ### **Parameters**
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to get the boundary for | One of the cities from `/cities` endpoint list |
     */
    get: operations["city_boundaries_cities_boundary__city__get"]
  }
  "/cities/places/{city}": {
    /**
     * ### **About**
     * Takes in a city and returns the list of places (sub-areas) within a city.
     * Ex: Burbank, Beverly Hills are example of `places` in the city / urban area of Los Angeles.
     * These don't qualify as areas or neighborhoods.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/place.png" height="300"></img></p>
     *
     * ### **Parameters**
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to get places list for | One of the cities from `/cities` endpoint list |
     */
    get: operations["city_places_cities_places__city__get"]
  }
  "/cities/places/boundary/{city}/{place}": {
    /**
     * ### **About**
     * Takes in a city and place within the city and returns the boundary of the place.
     * Ex: Burbank, Beverly Hills are example of `places` in the city / urban area of Los Angeles.
     *
     * ### **Parameters**
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city within which the place exists | One of the cities from `/cities` endpoint list |
     * | **place** | The place to get the boundary for | One of the places from `/cities/places/{city}` endpoint list |
     */
    get: operations["place_boundaries_cities_places_boundary__city___place__get"]
  }
  "/cities/areas/{city}": {
    /**
     * ### **About**
     * Takes in a city and returns the list of areas (neighborhoods) within a city.
     * Ex: Financial District, Upper West Side are example of `areas` in the city / urban area of New York.
     * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/neighborhood.png" height="300"></img></p>
     *
     * ### **Parameters**
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city to get areas list for | One of the cities from `/cities` endpoint list |
     */
    get: operations["city_areas_cities_areas__city__get"]
  }
  "/cities/areas/boundary/{city}/{area}": {
    /**
     * ### **About**
     * Takes in a city and area within the city and returns the boundary of the area / neighborhood.
     * Ex: Financial District, Upper West Side are example of `areas` in the city / urban area of New York.
     *
     * ### **Parameters**
     * | parameter | description | limits |
     * | --- | --- | --- |
     * | **city** | The city within which the area exists | One of the cities from `/cities` endpoint list |
     * | **area** | The area / neighborhood to get the boundary for | One of the areas from `/cities/areas/{city}` endpoint list |
     */
    get: operations["area_boundaries_cities_areas_boundary__city___area__get"]
  }
  "/report/location": {
    /** <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/report.png" height="800"></img></p> */
    get: operations["report_single_report_location_get"]
  }
  "/": {
    get: operations["home__get"]
  }
}

export interface components {
  schemas: {
    /** AreaInsights */
    AreaInsights: {
      /** Street Stats */
      street_stats: components["schemas"]["StreetStat"][]
      /** Neighborhood Stats */
      neighborhood_stats: components["schemas"]["NeighborhoodStat"][]
      /** Postcode Stats */
      postcode_stats: components["schemas"]["PostcodeStat"][]
    }
    /** AreaInsightsEndpointResponse */
    AreaInsightsEndpointResponse: {
      request: components["schemas"]["GenericInsightsRequests"]
      response: components["schemas"]["AreaInsights"]
    }
    /** BrandInsights */
    BrandInsights: {
      /** Max Outlets */
      max_outlets: string
      /** Max Avg Rating */
      max_avg_rating: string
      /** Max Avg Reviews */
      max_avg_reviews: string
      /** Outlet Count */
      outlet_count: number
      /** Brand Stats By Outlet Count */
      brand_stats_by_outlet_count: components["schemas"]["BrandStat"][]
      /** Brand Stats By Avg Rating */
      brand_stats_by_avg_rating: components["schemas"]["BrandStat"][]
      /** Brand Stats By Avg Number Of Reviews */
      brand_stats_by_avg_number_of_reviews: components["schemas"]["BrandStat"][]
      outlet_counts_by_price: components["schemas"]["PriceBins"]
      /** Operating Hours Outlet Count */
      operating_hours_outlet_count: number
      operating_hours: components["schemas"]["OperatingHours"]
    }
    /** BrandInsightsEndpointResponse */
    BrandInsightsEndpointResponse: {
      request: components["schemas"]["GenericInsightsRequests"]
      response: components["schemas"]["BrandInsights"]
    }
    /** BrandStat */
    BrandStat: {
      /** Brand Name */
      brand_name: string
      /** Avg Rating */
      avg_rating: number
      /** Avg Number Of Reviews */
      avg_number_of_reviews: number
      /** Outlet Count */
      outlet_count: number
      /** Category Tags */
      category_tags: string[]
      price_bins: components["schemas"]["PriceBins"]
    }
    /** CategoryInsights */
    CategoryInsights: {
      /** Max Outlets */
      max_outlets: string
      /** Max Avg Rating */
      max_avg_rating: string
      /** Max Avg Reviews */
      max_avg_reviews: string
      /** Min Avg Rating */
      min_avg_rating: string
      /** Category Stats */
      category_stats: components["schemas"]["CategoryStat"][]
      /** Category By Pairwise Occurrence */
      category_by_pairwise_occurrence: components["schemas"]["CategoryPairwiseOccurrence"][]
    }
    /** CategoryInsightsEndpointResponse */
    CategoryInsightsEndpointResponse: {
      request: components["schemas"]["GenericInsightsRequests"]
      response: components["schemas"]["CategoryInsights"]
    }
    /** CategoryPairwiseOccurrence */
    CategoryPairwiseOccurrence: {
      /** Category 1 */
      category_1: string
      /** Category 2 */
      category_2: string
      /** Pair Occurrences */
      pair_occurrences: number
    }
    /** CategoryStat */
    CategoryStat: {
      /** Category Tag */
      category_tag: string
      /** Avg Rating */
      avg_rating: number
      /** Avg Number Of Reviews */
      avg_number_of_reviews: number
      /** Outlet Count */
      outlet_count: number
      price_bins: components["schemas"]["PriceBins"]
    }
    /** CompetitionData */
    CompetitionData: {
      /** Top Occurring Categories */
      top_occurring_categories?: string[]
      /** Top Nearby Outlets */
      top_nearby_outlets?: components["schemas"]["TopOutlets"][]
      /** Operating Hours Outlet Count */
      operating_hours_outlet_count: number
      operating_hours: components["schemas"]["OperatingHours"]
    }
    /** CompetitionDiscoveryBrandsEndpointResponse */
    CompetitionDiscoveryBrandsEndpointResponse: {
      request?: components["schemas"]["CompetitionDiscoveryRequest"]
      response?: components["schemas"]["CompetitionDiscoveryBrandsResponse"]
    }
    /** CompetitionDiscoveryBrandsResponse */
    CompetitionDiscoveryBrandsResponse: {
      /** Brands */
      brands?: string[]
    }
    /** CompetitionDiscoveryCategoriesEndpointResponse */
    CompetitionDiscoveryCategoriesEndpointResponse: {
      request?: components["schemas"]["CompetitionDiscoveryRequest"]
      response?: components["schemas"]["CompetitionDiscoveryCategoriesResponse"]
    }
    /** CompetitionDiscoveryCategoriesResponse */
    CompetitionDiscoveryCategoriesResponse: {
      /** Categories */
      categories?: string[]
    }
    /** CompetitionDiscoveryRequest */
    CompetitionDiscoveryRequest: {
      /** City */
      city: string
      /** Commercial Type */
      commercial_type: string
    }
    /** CompetitionEndpointResponse */
    CompetitionEndpointResponse: {
      request: components["schemas"]["CompetitionRequest"]
      response: components["schemas"]["CompetitionResponse"]
    }
    /** CompetitionInsights */
    CompetitionInsights: {
      /** Nearby Outlet Count */
      nearby_outlet_count?: number
      /** Rating Percentile */
      rating_percentile?: number
      /** Price Range Percentile */
      price_range_percentile?: number
      /** Orders Percentile */
      orders_percentile?: number
      price_bins: components["schemas"]["PriceBins"]
    }
    /** CompetitionRequest */
    CompetitionRequest: {
      /** Latitude */
      latitude: number
      /** Longitude */
      longitude: number
      /** City */
      city: string
      /** Commercial Type */
      commercial_type: string
      /** Radius Meters */
      radius_meters: number
      /** Brands */
      brands?: string[]
      /** Categories */
      categories?: string[]
    }
    /** CompetitionResponse */
    CompetitionResponse: {
      insights: components["schemas"]["CompetitionInsights"]
      data: components["schemas"]["CompetitionData"]
    }
    /** Demographics */
    Demographics: {
      total_population?: components["schemas"]["GeneralStatisitcal"]
      youth_population?: components["schemas"]["GeneralStatisitcal"]
      middle_aged_population?: components["schemas"]["GeneralStatisitcal"]
      senior_population?: components["schemas"]["GeneralStatisitcal"]
      self_mobilizing_population?: components["schemas"]["GeneralStatisitcal"]
      population_affluence?: components["schemas"]["PopulationAffluence"]
    }
    /** GeneralStatisitcal */
    GeneralStatisitcal: {
      /** Value */
      value?: number
      /** City */
      city?: number
      /** Share */
      share?: number
    }
    /** GenericInsightsRequests */
    GenericInsightsRequests: {
      /** City */
      city: string
      /** Commercial Type */
      commercial_type: string
      /** Categories */
      categories?: string[]
      /** Price Range */
      price_range?: number
    }
    /** GeojsonSpec */
    GeojsonSpec: {
      /**
       * Type
       * @default FeatureCollection
       */
      type?: string
      /** Features */
      features: components["schemas"]["GeometryFeature"][]
    }
    /** GeometryFeature */
    GeometryFeature: {
      /**
       * Type
       * @default Polygon
       */
      type?: string
      /** Properties */
      properties?: { [key: string]: unknown }
      geometry: components["schemas"]["GeometryModel"]
    }
    /** GeometryModel */
    GeometryModel: {
      /**
       * Type
       * @default Polygon
       */
      type?: string
      /** Coordinates */
      coordinates: unknown[]
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /** HouseholdComposition */
    HouseholdComposition: {
      household_count?: components["schemas"]["GeneralStatisitcal"]
      households_with_family_count?: components["schemas"]["GeneralStatisitcal"]
      avg_persons_per_household?: components["schemas"]["GeneralStatisitcal"]
    }
    /** Income */
    Income: {
      household?: components["schemas"]["IncomeStatistical"]
      individual?: components["schemas"]["IncomeStatistical"]
    }
    /** IncomeStatistical */
    IncomeStatistical: {
      avg?: components["schemas"]["GeneralStatisitcal"]
      median?: components["schemas"]["GeneralStatisitcal"]
    }
    /** NeighborhoodStat */
    NeighborhoodStat: {
      /** Neighborhood */
      neighborhood: string
      /** Avg Rating */
      avg_rating: number
      /** Avg Number Of Reviews */
      avg_number_of_reviews: number
      /** Brand Count */
      brand_count: number
    }
    /** OperatingHours */
    OperatingHours: {
      /** Sunday */
      sunday: number[]
      /** Monday */
      monday: number[]
      /** Tuesday */
      tuesday: number[]
      /** Wednesday */
      wednesday: number[]
      /** Thursday */
      thursday: number[]
      /** Friday */
      friday: number[]
      /** Saturday */
      saturday: number[]
    }
    /** PopulationAffluence */
    PopulationAffluence: {
      low_median_household_income?: components["schemas"]["GeneralStatisitcal"]
      medium_median_household_income?: components["schemas"]["GeneralStatisitcal"]
      high_median_household_income?: components["schemas"]["GeneralStatisitcal"]
    }
    /** PostcodeStat */
    PostcodeStat: {
      /** Postcode */
      postcode: string
      /** Avg Rating */
      avg_rating: number
      /** Avg Number Of Reviews */
      avg_number_of_reviews: number
      /** Brand Count */
      brand_count: number
    }
    /** PriceBins */
    PriceBins: {
      /** Price 1 */
      price_1?: number
      /** Price 2 */
      price_2?: number
      /** Price 3 */
      price_3?: number
      /** Price 4 */
      price_4?: number
    }
    /** ReportSiteEndpointResponse */
    ReportSiteEndpointResponse: {
      request: components["schemas"]["ReportSiteRequest"]
      response: components["schemas"]["ReportSiteResponse"]
    }
    /** ReportSiteRequest */
    ReportSiteRequest: {
      /** Latitude */
      latitude: number
      /** Longitude */
      longitude: number
      /** City */
      city: string
      /** Mode Of Mobility */
      mode_of_mobility: string
      /** Time Minutes */
      time_minutes?: number
      /** Distance Meters */
      distance_meters?: number
    }
    /** ReportSiteResponse */
    ReportSiteResponse: {
      /** Link */
      link: string
    }
    /** ReverseGeocodeEndpointResponse */
    ReverseGeocodeEndpointResponse: {
      request: components["schemas"]["ReverseGeocodeRequest"]
      response: components["schemas"]["ReverseGeocodeResponse"]
    }
    /** ReverseGeocodeRequest */
    ReverseGeocodeRequest: {
      /** Latitude */
      latitude: number
      /** Longitude */
      longitude: number
    }
    /** ReverseGeocodeResponse */
    ReverseGeocodeResponse: {
      /** Nbd Name */
      nbd_name?: string
      /** Place Code */
      place_code?: string
      /** Place Name */
      place_name?: string
      /** Place Name Complete */
      place_name_complete?: string
      /** Urban Area Name */
      urban_area_name?: string
      /** Urban Area Name Complete */
      urban_area_name_complete?: string
      /** County Geo Id */
      county_geo_id: string
      /** County Name */
      county_name: string
      /** County Name Complete */
      county_name_complete: string
      /** State Code */
      state_code: string
      /** State Name */
      state_name: string
      /** State Postcode */
      state_postcode: string
      /** County Code */
      county_code: string
    }
    /** SalesTerritoryCompareCandidatesEndpointResponse */
    SalesTerritoryCompareCandidatesEndpointResponse: {
      request: components["schemas"]["SalesTerritoryCompareCandidatesRequest"]
      response: components["schemas"]["SalesTerritoryResponse"]
    }
    /** SalesTerritoryCompareCandidatesRequest */
    SalesTerritoryCompareCandidatesRequest: {
      /** Candidates */
      candidates: components["schemas"]["SalesTerritoryRequest"][]
    }
    /** SalesTerritoryCompareGeojsonEndpointResponse */
    SalesTerritoryCompareGeojsonEndpointResponse: {
      request: components["schemas"]["SalesTerritoryCompareGeojsonRequest"]
      response: components["schemas"]["SalesTerritoryResponse"]
    }
    /** SalesTerritoryCompareGeojsonRequest */
    SalesTerritoryCompareGeojsonRequest: {
      geojson: components["schemas"]["GeojsonSpec"]
      /** City */
      city: string
    }
    /** SalesTerritoryCompareGeometriesEndpointResponse */
    SalesTerritoryCompareGeometriesEndpointResponse: {
      request: components["schemas"]["SalesTerritoryCompareGeometriesRequest"]
      response: components["schemas"]["SalesTerritoryResponse"]
    }
    /** SalesTerritoryCompareGeometriesRequest */
    SalesTerritoryCompareGeometriesRequest: {
      /** Geometries */
      geometries: components["schemas"]["GeometryModel"][]
      /** City */
      city: string
    }
    /** SalesTerritoryEndpointResponse */
    SalesTerritoryEndpointResponse: {
      request?: components["schemas"]["SalesTerritoryRequest"]
      response?: components["schemas"]["SalesTerritoryResponse"]
    }
    /** SalesTerritoryRequest */
    SalesTerritoryRequest: {
      /** Latitude */
      latitude: number
      /** Longitude */
      longitude: number
      /** City */
      city: string
      /** Mode Of Mobility */
      mode_of_mobility?: string
      /** Time Minutes */
      time_minutes?: number
      /** Distance Meters */
      distance_meters?: number
    }
    /** SalesTerritoryResponse */
    SalesTerritoryResponse: {
      sociodemographic?: components["schemas"]["SocioDemographicResponse"]
      /** Areas Covered */
      areas_covered?: unknown[]
      geometry?: components["schemas"]["GeojsonSpec"]
    }
    /** SocioDemographicResponse */
    SocioDemographicResponse: {
      demographics?: components["schemas"]["Demographics"]
      income?: components["schemas"]["Income"]
      household_composition?: components["schemas"]["HouseholdComposition"]
    }
    /** SocioDemographicsCityResponse */
    SocioDemographicsCityResponse: {
      /** Average Individual Income */
      average_individual_income?: number
      /** Median Household Income */
      median_household_income?: number
      /** Population Total */
      population_total?: number
      /** Population Youth */
      population_youth?: number
      /** Population Middle Age */
      population_middle_age?: number
      /** Population Senior */
      population_senior?: number
      /** Work Transportation Self Mobility */
      work_transportation_self_mobility?: number
      /** Household Income Low */
      household_income_low?: number
      /** Household Income Medium */
      household_income_medium?: number
      /** Household Income High */
      household_income_high?: number
      /** Households Total */
      households_total?: number
      /** Households Family Total */
      households_family_total?: number
      /** Average Household Composition */
      average_household_composition?: number
    }
    /** StreetStat */
    StreetStat: {
      /** Street */
      street: string
      /** Avg Rating */
      avg_rating: number
      /** Avg Number Of Reviews */
      avg_number_of_reviews: number
      /** Brand Count */
      brand_count: number
    }
    /** TopOutlets */
    TopOutlets: {
      /** Brand Name */
      brand_name: string
      /** Address */
      address: string
      /** Category Tags */
      category_tags: string[]
      /** Rating */
      rating: number
      /** Number Of Reviews */
      number_of_reviews?: number
      /** Rating Percentile */
      rating_percentile: number
      /** Orders Percentile */
      orders_percentile: number
      /** Latitude */
      latitude: number
      /** Longitude */
      longitude: number
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
}

export interface operations {
  /**
   * ### **About**:
   *
   * Takes in a city and returns the summarized (and averaged) statistics on demographics, income, household composition, and racial information.
   * Can be used to summarize the overall population profile of a city.
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city name to retrieve stats for | One of the cities from `/cities` endpoint list |
   */
  sociodemographics_city_socio_demographics_stats__city__get: {
    parameters: {
      path: {
        city: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SocioDemographicsCityResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Takes in a city and area and returns the summarized (and averaged) statistics on demographics, income, household composition, and racial information    for the area. Useful for qualifying population profiles within specific neighborhoods or administrative areas.
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city containing the area | One of the cities from `/cities` endpoint list |
   * | **area** | The area / neighborhood within the city | One of the areas within the city from `/cities/places/{city}` endpoint list |
   */
  sociodemographics_area_socio_demographics_stats__city___area__get: {
    parameters: {
      path: {
        city: string
        area: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTerritoryResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Takes in a coordinate point, the city where the point is located and the [isochrone](https://en.wikipedia.org/wiki/Isochrone_map) parameters.
   * Returns the isochrone populated with the relevant sales territory statistics valid within the isochrone area.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/sales_territory.png" height="400"></img></p>
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | |
   * | **city** | The city where the coordinate point is taken | One of the cities from `/cities` endpoint list |
   * | **time_minutes** | The time in minutes to consider using `mode_of_mobility` from the coordinate point | Cannot exceed 60 |
   * | **mode_of_mobility** | The means of transporation used to cover an area within `time_minutes` duration | Acceptable values: `driving`, `walking` |
   */
  sales_territory_time_isochrone_socio_demographics_sales_territory_time_get: {
    parameters: {
      query: {
        latitude: number
        longitude: number
        city: string
        time_minutes: number
        mode_of_mobility: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTerritoryEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Takes in a coordinate point, the city where the point is located and the radius / [isoline](https://en.wikipedia.org/wiki/Contour_line) parameters.
   * **When `mode_of_mobility` is left as `null`**, `distance_meters` assumes a straight-line radius from the input coordinate point and populates the radius with required statistics of the sales territory.
   * **When `mode_of_mobility` is specified**, `distance_meters` takes the actual travel distance by roads (and not a circular displacement) to populate the sales territory statistics.
   *
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/radius.png" height="300"></img></p>
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | |
   * | **city** | The city where the coordinate point is taken | One of the cities from `/cities` endpoint list |
   * | **distance_meters** | The distance (or displacement for circular radius) in meters to consider from the coordinate point | Cannot exceed 10km |
   * | **mode_of_mobility** | The means of transporation used to cover an area within `distance_meters` duration. | Acceptable values: `driving`, `walking`. If `null`, straight line radius is used as displacement |
   */
  sales_territory_distance_isochrone_socio_demographics_sales_territory_distance_get: {
    parameters: {
      query: {
        latitude: number
        longitude: number
        city: string
        distance_meters: number
        mode_of_mobility?: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTerritoryEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Accepts a list of candidate locations and computes the coverage of all locations together with respect to the city taken for expansion.
   * Returns similar values to Sales Territory with `values` and `shares` taken for all locations. Useful for determining redundant locations / degree of overlap between sites.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/coverage.png" height="400"></img></p>
   *
   * ### **Payload**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **candidates** | List of candidate locations, each with `SalesTerritoryRequest` schema | All candidates must be within the same city |
   *
   * * The candidate locations' territories will be derived per location.
   * * The resulting geometries will be used to derive a unified metric of combined territory coverage.
   */
  sales_territory_coverage_candidates_socio_demographics_sales_territory_coverage_candidates_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTerritoryCompareCandidatesEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SalesTerritoryRequest"][]
      }
    }
  }
  /**
   * ### **About**:
   *
   * Accepts a GeoJSON of geometry features and computes the coverage of all locations together with respect to the city taken for expansion.
   * Returns similar values to Sales Territory with `values` and `shares` taken for all locations. Useful for determining redundant locations / degree of overlap between sites.
   *
   * ### **Payload**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **geojson** | a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) containing list of features. | Features can only be [Polygon or MultiPolygon](https://en.wikipedia.org/wiki/GeoJSON#Geometries) types. All features must be within the same city. |
   * | **city** | The city of the GeoJSON of features | One of the cities from `/cities` endpoint list
   */
  sales_territory_coverage_geojson_socio_demographics_sales_territory_coverage_geojson_post: {
    parameters: {
      query: {
        city?: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTerritoryCompareGeojsonEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeojsonSpec"]
      }
    }
  }
  /**
   * ### **About**:
   *
   * Accepts a list of geometries and computes the coverage of all locations together with respect to the city taken for expansion.
   * Returns similar values to Sales Territory with `values` and `shares` taken for all locations. Useful for determining redundant locations / degree of overlap between sites.
   *
   * ### **Payload**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **geometries** | A list of geometries to derive coverage for. | Geometries can only be [Polygon or MultiPolygon](https://en.wikipedia.org/wiki/GeoJSON#Geometries) types. All geometries / features must be within the same city. |
   * | **city** | The city  within which geometries are present  | One of the cities from `/cities` endpoint list. |
   */
  sales_territory_coverage_geometries_socio_demographics_sales_territory_coverage_geometries_post: {
    parameters: {
      query: {
        city?: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTerritoryCompareGeometriesEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeometryModel"][]
      }
    }
  }
  list_types_competition_types_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": string[]
        }
      }
    }
  }
  /**
   * **About**:
   *
   * Takes in a coordinate point, the city where the point is located, the search radius and filters (brands and categories).
   * Returns a set of statistics and data for all outlets within the search radius.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/restaurants.png" height="300"></img></p>
   *
   * **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | |
   * | **city** | The city in which the coordinate points exist | One of the cities from `/cities` endpoint list |
   * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
   * | **radius_meters** | The straight line displacement (circular radius) inside which to search for outlets. | Cannot exceed 2000 |
   * | **brands** | A list of brands that filters for those brands within the search radius | Only accepts brands obtained from `competition/brands/{city}/{commercial_type}` |
   * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
   */
  nearby_outlets_competition_nearby__commercial_type__get: {
    parameters: {
      path: {
        commercial_type: string
      }
      query: {
        latitude: number
        longitude: number
        city: string
        radius_meters?: number
        brands?: string[]
        categories?: string[]
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CompetitionEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * **About**:
   *
   * Takes in a `city` and a `commercial_type` returns a set of all brands of `commercial_type` within the city.
   *
   * **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to list brands for | One of the cities from `/cities` endpoint list |
   * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
   */
  select_brands_competition_brands__city___commercial_type__get: {
    parameters: {
      path: {
        city: string
        commercial_type: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CompetitionDiscoveryBrandsEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * **About**:
   *
   * Takes in a `city` and a `commercial_type` returns a set of all categories of `commercial_type` within the city ordered by most outlets.
   *
   * **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to list categories for | One of the cities from `/cities` endpoint list |
   * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
   */
  select_categories_competition_categories__city___commercial_type__get: {
    parameters: {
      path: {
        city: string
        commercial_type: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CompetitionDiscoveryCategoriesEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Takes in a `city` parameter along with optional filters for `categories` and `price range`.
   * Returns a comprehensive list of insights for the city for `commercial_type` taking categories as the threshold.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/cuisine_insights.png" height="300"></img></p>
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to receive category stats for | One of the cities from `/cities` endpoint list |
   * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
   * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
   * | **price_range** | The price range of outlets to filter for within a scaled range | 1 - 4|
   *
   * ### **Filter Tags**
   * **Categories**
   *
   * | metric | categories filter | price range filter |
   * | --- | :---: | :---: |
   * | **max_outlets** |  | ✅ |
   * | **min_avg_rating** |  | ✅ |
   * | **max_avg_reviews** |  | ✅ |
   * | **min_avg_rating** |  | ✅ |
   * | **category_stats** |  | ✅ |
   * | **category_by_pairwise_occurrence** | ✅ | ✅ |
   */
  city_categories_stats_competition_insights_categories__city___commercial_type__get: {
    parameters: {
      path: {
        city: string
        commercial_type: string
      }
      query: {
        categories?: string[]
        price_range?: number
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryInsightsEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Takes in a `city`, `commercial_type` parameter along with optional filters for `categories` and `price range`.
   * Returns a comprehensive list of insights for the city taking brands as the threshold.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/brand_insights.png" height="300"></img></p>
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to receive brand stats for | One of the cities from `/cities` endpoint list |
   * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
   * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
   * | **price_range** | The price range of outlets to filter for within a scaled range | 1 - 4|
   *
   * ### **Filter Tags**
   *
   * **Brands**
   *
   * | metric | categories filter | price range filter |
   * | --- | :---: | :---: |
   * | **max_outlets** | ✅ | ✅ |
   * | **max_avg_rating** | ✅ | ✅ |
   * | **max_avg_reviews** | ✅ | ✅ |
   * | **outlets_count** | ✅ | ✅ |
   * | **brand_stats_by_outlet_count** | ✅ | ✅ |
   * | **brand_stats_by_avg_rating** | ✅ | ✅ |
   * | **brand_stats_by_avg_number_of_reviews** | ✅ | ✅ |
   * | **outlet_counts_by_price** | ✅ |  |
   * | **operating_hours_outlet_count** | ✅ | ✅ |
   * | **operating_hours** | ✅ | ✅ |
   */
  city_brands_stats_competition_insights_brands__city___commercial_type__get: {
    parameters: {
      path: {
        city: string
        commercial_type: string
      }
      query: {
        categories?: string[]
        price_range?: number
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BrandInsightsEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**:
   *
   * Takes in a `city` and `commercial type` parameter along with optional filters for `categories` and `price range`.
   * Returns a comprehenensive list of insights for the city taking areas (roads, postcodes, etc) as the threshold.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/area_insights.png" height="300"></img></p>
   *
   * ### **Parameters**:
   *
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** |  The city to receive area stats for | One of the cities from `/cities` endpoint list |
   * | **commercial_type** | The type of competition type to track | One of the types from `/competition/types` |
   * | **categories** | A list of categories that filters for those outlets containing the category within the `commercial type | Only accepts categories obtained from `competition/categories/{city}/{commercial_type}` |
   * | **price_range** | The price range of outlets to filter for within a scaled range | 1 - 4|
   *
   * ### **Filter Tags**
   *
   * **Brands**
   *
   * | metric | categories filter | price range filter |
   * | --- | :---: | :---: |
   * | **street_stats** | ✅ | ✅ |
   * | **neighbourhood_stats** | ✅ | ✅ |
   * | **postcode_stats** | ✅ | ✅ |
   */
  city_area_stats_competition_insights_areas__city___commercial_type__get: {
    parameters: {
      path: {
        city: string
        commercial_type: string
      }
      query: {
        categories?: string[]
        price_range?: number
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AreaInsightsEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**
   * * Get a string array of all cities ordered by frequency of outlet count
   */
  select_cities_cities_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": string[]
        }
      }
    }
  }
  /**
   * ### **About**
   * Reverse geocode a latitude and longitude in the US. The maximum depth of the geocode is neighborhood level.
   * Hierarchy: `state` -> `county` -> `urban_area` -> `city / place` -> `neighborhood / area`
   *
   * ### **Hierarchy Coverage**
   * | level | coverage | example |
   * | --- | --- | --- |
   * | `state` | Full country - US | `California` |
   * | `county` | Full country - US | `San Francisco County` |
   * | `urban_area` | Dense populated urban areas in US | `San Francisco Bay Area` |
   * | `city / place` | Only available in areas that have `urban_area` | `San Francisco` |
   * | `neighborhood / area` | Only available in areas that have `city / place` | `Downtown` |
   *
   * ### **Parameters**
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **latitude, longitude** | The coordinate points in [WGS 84 Projection (EPSG / SRID 4326)](https://en.wikipedia.org/wiki/World_Geodetic_System) | Only coordinates within United States |
   */
  general_geocode_cities_reverse_geocode_get: {
    parameters: {
      query: {
        latitude: number
        longitude: number
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReverseGeocodeEndpointResponse"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**
   * Takes in a city and returns the boundary as a GeoJSON of the city-limits.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/city_boundary.png" height="300"></img></p>
   *
   * ### **Parameters**
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to get the boundary for | One of the cities from `/cities` endpoint list |
   */
  city_boundaries_cities_boundary__city__get: {
    parameters: {
      path: {
        city: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GeojsonSpec"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**
   * Takes in a city and returns the list of places (sub-areas) within a city.
   * Ex: Burbank, Beverly Hills are example of `places` in the city / urban area of Los Angeles.
   * These don't qualify as areas or neighborhoods.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/place.png" height="300"></img></p>
   *
   * ### **Parameters**
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to get places list for | One of the cities from `/cities` endpoint list |
   */
  city_places_cities_places__city__get: {
    parameters: {
      path: {
        city: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": string[]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**
   * Takes in a city and place within the city and returns the boundary of the place.
   * Ex: Burbank, Beverly Hills are example of `places` in the city / urban area of Los Angeles.
   *
   * ### **Parameters**
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city within which the place exists | One of the cities from `/cities` endpoint list |
   * | **place** | The place to get the boundary for | One of the places from `/cities/places/{city}` endpoint list |
   */
  place_boundaries_cities_places_boundary__city___place__get: {
    parameters: {
      path: {
        city: string
        place: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GeojsonSpec"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**
   * Takes in a city and returns the list of areas (neighborhoods) within a city.
   * Ex: Financial District, Upper West Side are example of `areas` in the city / urban area of New York.
   * <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/neighborhood.png" height="300"></img></p>
   *
   * ### **Parameters**
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city to get areas list for | One of the cities from `/cities` endpoint list |
   */
  city_areas_cities_areas__city__get: {
    parameters: {
      path: {
        city: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": string[]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * ### **About**
   * Takes in a city and area within the city and returns the boundary of the area / neighborhood.
   * Ex: Financial District, Upper West Side are example of `areas` in the city / urban area of New York.
   *
   * ### **Parameters**
   * | parameter | description | limits |
   * | --- | --- | --- |
   * | **city** | The city within which the area exists | One of the cities from `/cities` endpoint list |
   * | **area** | The area / neighborhood to get the boundary for | One of the areas from `/cities/areas/{city}` endpoint list |
   */
  area_boundaries_cities_areas_boundary__city___area__get: {
    parameters: {
      path: {
        city: string
        area: string
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GeojsonSpec"]
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** <p align="center"><img src="https://dotlas-marketing.s3.amazonaws.com/api/cities/report.png" height="800"></img></p> */
  report_single_report_location_get: {
    parameters: {
      query: {
        latitude: number
        longitude: number
        city: string
        mode_of_mobility: string
        time_minutes?: number
        distance_meters?: number
      }
    }
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": string
        }
      }
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  home__get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": string
        }
      }
    }
  }
}

export interface external {}
